/* static/index.css - iPad対応と左右余白均等化を意識 */
html, body { /* html, body をビューポートいっぱいに */
    font-family: "Helvetica Neue", Helvetica, STHeiTi, sans-serif;
    margin: 0;
    padding: 0;
    width: 100%;
    height: 100%;
    overflow: hidden; /* 基本的にスクロールバーは不要 */
    background-color: #333; /* ゲーム外の背景色 (余白が見える場合) */
}

/* .loading は元のまま */
.loading { /* ... (変更なし) ... */ }

/* .SHADE は index.js で position が動的に設定されることが多い */
/* ここでは基本的な設定と、全画面表示を確実にする */
.SHADE {
    top: 0;
    left: 0;
    width: 100%;
    height: 100%; /* bottom: 0; の代わりに height を使う方が確実な場合がある */
    z-index: 11;
    overflow: hidden;
    display: flex; /* Flexboxで内部要素を中央揃えしやすくする */
    align-items: center;
    justify-content: center;
}

/* 古いFlexboxの .BOX-* 系は削除またはコメントアウト */

.BBOX {
    box-sizing: border-box;
}

#welcome {
    background-color: rgba(0, 0, 0, .88); /* 少し濃く */
    text-align: center;
    font-weight: bold;
    color: white;
    /* SHADEクラスでflex中央揃えされるので、width/heightは内側のコンテナで制御 */
    /* padding はHTMLの .container で調整される想定 */
    /* display: none; はJSで制御 */
}

.welcome-bg {
    position: absolute; /* 親の #welcome に対して絶対配置 */
    top: 0;
    left: 0;
    width: 100%; /* 親要素いっぱいに */
    height: 100%;
    background-size: contain;
    background-repeat: no-repeat;
    background-position: center center;
    opacity: .3;
    z-index: -1; /* テキストの後ろ */
    /* 画像パスは index.js またはHTML側で設定されるか、ここで指定 */
    /* background-image: url(./image/your_welcome_image.png); */
}

#GameTimeLayer {
    /* index.js で position: absolute/fixed が動的に設定される */
    /* CSSでは初期位置やスタイルのみ */
    /* top: 1em; left: 0; width: 100%; はJSのスタイルに依存 */
    text-align: center;
    color: rgb(233, 138, 131);
    font-size: 3.5em; /* JSのfontunitに依存する可能性あり */
    font-weight: bold;
    text-shadow: 0 0 2px #fff, 0 0 3px #fff;
    overflow: hidden;
    z-index: 1050; /* ゲームUIより手前 */
    padding: 5px 10px; /* 視認性のため少しパディング */
    background-color: rgba(0,0,0,0.2); /* 任意: 背景を少し暗くして文字を見やすく */
    border-radius: 5px; /* 任意: 角丸 */
}

#GameLayerBG { /* ゲームエリア全体のコンテナ */
    /* index.js で position: absolute/fixed が動的に設定される */
    top: 0; left: 0; right: 0; bottom: 0; /* JSでの指定を尊重 */
    overflow: hidden;
    background: #fff; /* ゲームエリアの背景は白 */
    /* 中央揃えは #gameBody で行う */
    z-index: 10;
}

.GameLayer { /* スクロールするタイル群のレイヤー */
    position: absolute;
    bottom: 0;
    left: 0;
    /* width, height は JS で設定される */
}

.block { /* 個々のタイル */
    position: absolute;
    border-top: 1px solid #b8dfe6; /* グリッド線 */
    background-repeat: no-repeat;
    background-position: center;
    box-sizing: border-box;
    background-size: contain; /* 画像がタイル内に収まるように */
}

/* 画像パスはCSSファイル(static/index.css)からの相対パス */
.t1, .t2, .t3, .t4, .t5 {
    background-image: url(./image/ClickBefore.png);
}
.tt1, .tt2, .tt3, .tt4, .tt5 {
    background-image: url(./image/ClickAfter.png);
}

.bl { /* 左側のグリッド線 */
    border-left: 1px solid #b8dfe6;
}

/* flashアニメーション、.bad は元のまま */
@-ms-keyframes flash { /* ... (変更なし) ... */ }
@-webkit-keyframes flash { /* ... (変更なし) ... */ }
.flash { /* ... (変更なし) ... */ }
.bad { /* ... (変更なし) ... */ }

* {
    -webkit-tap-highlight-color: rgba(0, 0, 0, 0);
    -ms-tap-highlight-color: rgba(0, 0, 0, 0);
    /* -ms-user-select: none; は必要に応じてbodyや特定要素に */
}
body { /* ユーザー選択をbodyに限定 */
    user-select: none;
    -webkit-user-select: none;
    -ms-user-select: none;
}


#GameScoreLayer {
    /* SHADEクラスで基本スタイル、JSで position が設定される */
    padding-top: 2em; /* JSのfontunitに依存 */
    font-size: 1.8em; /* JSのfontunitに依存 */
    font-weight: bold;
    color: #fff; /* HTML側の背景色に合わせて白文字 */
    text-align: center;
    overflow: hidden;
    /* display: none; はJSで制御 */
    z-index: 1100; /* 最前面 */
}
/* GameScoreLayer内の背景を持つdivはHTML側でインラインスタイル設定 */


/* #landscape は元のまま display: none; */
#landscape { display: none; }
/* index.js 内で @media screen and (orientation:landscape) {#landscape {display: box; ...}} があるので、
   このCSSでは初期状態を none にしておく */


#gameBody { /* JSで isDesktop の場合に挿入される想定 */
    position: relative; /* JSで #GameLayerBG などが absolute 配置される基準 */
    width: 100%;     /* ★★★ 画面幅いっぱいに ★★★ */
    max-width: 420px; /* ★★★ スマホに近い最大幅に制限 (iPad縦表示でも左右に余白が出るように) ★★★ */
                      /*     この値はゲームの見た目や操作性で調整してください。             */
                      /*     元の640pxだとiPadで広すぎる可能性があります。                  */
    height: 100%;    /* ★★★ 親要素(body)の高さに合わせる ★★★ */
    margin: 0 auto;  /* ★★★ 水平中央揃え ★★★ */
    overflow: hidden; /* ゲームレイヤーがはみ出ないように */
    background-color: #111; /* #gameBody の背景色 (デバッグ用、通常は見えない) */
}

/* #share-wx は元のまま display: none; */
#share-wx { /* ... (変更なし) ... */ }


/* #btn_group, #setting の幅はHTML側のBootstrapクラスで制御されることを優先 */
/* ここでは、もしBootstrapが効かない場合のフォールバックや微調整のみ */
#btn_group {
    /* width: 37.5%; は削除 */
    max-width: 280px; /* HTMLの指定と合わせるか、より柔軟に */
    margin-left: auto;
    margin-right: auto;
}
#setting {
    /* width: 50%; は削除 */
    max-width: 450px; /* HTMLの指定と合わせるか、より柔軟に */
    margin-left: auto;
    margin-right: auto;
}
/* 元のメディアクエリによる #btn_group, #setting の調整は、
   Bootstrapのレスポンシブユーティリティで対応することを推奨するためコメントアウト */

/* #GameScoreLayer .col-3, #GameScoreLayer .col-2 の max-width はBootstrapの列幅に任せるため削除 */

.dropdown-item {
    cursor: pointer;
}

/* 追加: body が flex コンテナとして振る舞い、#gameBody を中央に配置する試み */
/* ただし、isDesktop で #gameBody が挿入される場合のみ有効にするなど工夫が必要 */
@media (min-width: 768px) { /* 例えばタブレット以上の幅で */
    body {
        /* display: flex; */ /* これを入れると他の要素の配置に影響大なので注意 */
        /* align-items: center; */
        /* justify-content: center; */
    }
    /* #gameBody の margin: 0 auto; が中央揃えの役割を果たすので、body側のflexは必須ではない */
}
