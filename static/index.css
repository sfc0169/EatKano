/* static/index.css - レスポンシブ対応強化案 */
html {
  height: 100%;
  box-sizing: border-box; /* 全要素のbox-sizingの基本 */
}
*, *:before, *:after {
  box-sizing: inherit;
}

body {
    font-family: "Helvetica Neue", Helvetica, STHeiTi, sans-serif;
    margin: 0;
    padding: 0;
    height: 100%; /* htmlの高さ継承 */
    overflow: hidden; /* 基本的にスクロールバー非表示 */
    background-color: #333; /* ゲーム外の背景色（万が一の場合） */
    display: flex; /* 子要素を中央寄せにしやすくするため */
    justify-content: center; /* 水平中央寄せ */
    align-items: center; /* 垂直中央寄せ (ゲームコンテンツの高さによる) */
}

/* ゲームコンテンツ全体のラッパー (HTML側にこのIDを持つdivが必要になる場合) */
/* もし #gameBody が常に存在し、それがラッパーなら不要 */
/* .game-wrapper {
    width: 100%;
    max-width: 768px; /* iPad縦向きの幅に近い値、またはゲームの最適幅
    margin: 0 auto;
    overflow: hidden;
    position: relative; /* SHADEなどの基準になるように
    height: 100%; /* bodyの高さに合わせるか、内容に合わせるか
} */


/* .loading は元のまま */
.loading { /* ... (変更なし) ... */ }

.SHADE {
    position: absolute; /* #gameBody または .game-wrapper を基準とする */
    top: 0;
    left: 0;
    width: 100%;
    height: 100%; /* bottom:0 の代わりに */
    z-index: 11;
    overflow: hidden;
}

#welcome {
    background-color: rgba(0, 0, 0, .88);
    text-align: center;
    font-weight: bold;
    color: white;
    display: flex; /* Flexboxで内部コンテンツを中央揃え */
    flex-direction: column;
    justify-content: center;
    align-items: center;
    padding: 20px;
    /* display: none; はJSで制御 */
}

.welcome-bg {
    /* FILLクラスで position:absolute などが設定される想定 */
    background-size: contain;
    background-repeat: no-repeat;
    background-position: center center;
    opacity: .25;
    z-index: -1;
    background-image: url('./image/ClickBefore.png'); /* 仮のパス */
}

.FILL {
  position: absolute;
  top: 0;
  left: 0;
  width: 100%;
  height: 100%;
}

#GameTimeLayer {
    position: absolute; /* #gameBody または .game-wrapper を基準 */
    top: 1em; /* 相対的な位置 */
    left: 50%;
    transform: translateX(-50%);
    width: auto;
    padding: 0.2em 0.5em;
    background-color: rgba(0,0,0,0.4);
    border-radius: 8px;
    text-align: center;
    color: rgb(233, 138, 131);
    font-size: 3em; /* fontunit基準なので注意 */
    font-weight: bold;
    text-shadow: 0 0 2px #fff, 0 0 3px #fff;
    z-index: 12;
}

#GameLayerBG {
    position: absolute; /* #gameBody または .game-wrapper を基準 */
    top: 0;
    left: 0;
    width: 100%;
    height: 100%;
    overflow: hidden;
    background: #fff;
    z-index: 10;
}

.GameLayer {
    position: absolute;
    bottom: 0;
    left: 0;
}

.block {
    position: absolute;
    border-top: 1px solid #b8dfe6;
    background-repeat: no-repeat;
    background-position: center;
    box-sizing: border-box;
    background-size: contain;
    background-color: transparent;
}

.t1, .t2, .t3, .t4, .t5 { background-image: url(./image/ClickBefore.png); }
.tt1, .tt2, .tt3, .tt4, .tt5 { background-image: url(./image/ClickAfter.png); }
.bl { border-left: 1px solid #b8dfe6; }

/* flash, bad アニメーションは元のまま */
@keyframes flash { 0%, 100% { opacity: 1; } 50% { opacity: 0.3; } }
.flash { animation: flash .15s 3; }
.bad { background-color: rgba(211, 91, 91, 0.85); animation: flash .15s 2; }


* {
    -webkit-tap-highlight-color: rgba(0, 0, 0, 0);
    -ms-tap-highlight-color: rgba(0, 0, 0, 0);
}

#GameScoreLayer {
    position: absolute; /* #gameBody または .game-wrapper を基準 */
    color: #fff;
    text-align: center;
    display: none;
    z-index: 100;
    padding: 20px;
    background-color: rgba(0,0,0,0.8); /* スコアレイヤー自体の背景 */
    /* HTML側のインラインスタイルでさらに背景が設定されているので注意 */
}
#GameScoreLayer > div {
    max-width: 450px;
    margin-left: auto;
    margin-right: auto;
}


/* デスクトップ用の #gameBody スタイル */
/* index.js で isDesktop の場合にこのIDを持つdivが挿入される想定 */
#gameBody {
    position: relative; /* SHADE や GameLayerBG の基準点 */
    width: 100%; /* 親要素(body)いっぱいに広がる */
    height: 100%; /* 親要素(body)いっぱいに広がる */
    max-width: 640px; /* PCでの最大幅 */
    margin-left: auto; /* 中央寄せ */
    margin-right: auto; /* 中央寄せ */
    overflow: hidden; /* 内容がはみ出ないように */
    box-shadow: 0 0 20px rgba(0,0,0,0.3); /* PC表示時に枠を強調（任意） */
    background-color: #fff; /* #gameBody の背景は白 (GameLayerBGが重なる) */
}

/*
  index.js の document.write によるスタイル挿入部分の position 指定を再検討:
  (isDesktop ? '#welcome,#GameTimeLayer,#GameLayerBG,#GameScoreLayer.SHADE{position: absolute;}' :
               '#welcome,#GameTimeLayer,#GameLayerBG,#GameScoreLayer.SHADE{position:fixed;}...')

  - isDesktop の場合 (PC): #gameBody が relative なので、その中の要素は absolute で配置。これはOK。
  - isDesktop でない場合 (タブレット・スマホ):
    - #gameBody は存在しない。
    - 要素は body 直下に fixed で配置。
    - この場合、左右の余白を均等にするには、コンテンツの幅を制限し、margin: auto を使うか、
      Flexbox/Gridで body の子要素を中央に配置する。
    - しかし、ゲームタイル自体は画面幅いっぱいに4分割で表示したいはず。
    - したがって、#GameLayerBG は画面いっぱいで良い。
    - #welcome や #GameScoreLayer は画面中央に表示したいので、これらには別途 max-width と margin: auto を適用するか、
      Flexbox/Gridで親要素内で中央寄せにする必要がある。
*/

/* タブレット・スマホ向けの調整 (isDesktop = false の場合) */
/* index.js で #gameBody が挿入されないことを前提 */
@media (hover: none) and (pointer: coarse) { /* タッチデバイス向けの一般的なメディアクエリ */
    body {
        /* body自体は画面いっぱい */
    }

    /* ウェルカム画面やスコア画面を中央に、かつ幅を制限 */
    #welcome, #GameScoreLayer {
        /* JSで position: fixed が設定される */
        left: 50%;
        transform: translateX(-50%);
        width: 90%; /* 画面幅の90% */
        max-width: 500px; /* ただし最大幅は500px程度 */
        padding: 15px;
        box-sizing: border-box;
    }
    #GameScoreLayer { /* スコア画面はもう少し小さくても良いかも */
        max-width: 450px;
    }

    /* ボタン群や設定項目が画面幅に収まるように */
    #btn_group {
        max-width: 90%; /* 親の幅に対して */
        width: 280px; /* ただし固定幅も指定 */
    }
    #setting {
        max-width: 90%;
        width: 100%; /* 親の幅に対して */
    }
    #setting .input-group-text { /* ラベルが長すぎると改行するので調整 */
        font-size: 0.8em;
    }
}


/* ボタンやドロップダウンのスタイルはBootstrapに依存 */
.dropdown-item {
    cursor: pointer;
}
/* input-group-textのフォントサイズ調整はメディアクエリ内に移動 */
/* #setting input.form-control { font-size: 0.9em; } も同様 */
